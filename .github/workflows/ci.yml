name: Comprehensive CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: self-hosted  # Assuming you have labeled your self-hosted runners

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run unit tests
      run: |
        python -m unittest discover -s tests

    - name: Upload test report as an artifact
      uses: actions/upload-artifact@v2
      with:
        name: test-reports
        path: path/to/test-reports  # Replace with your test report path

  dockerize-application:
    needs: build-and-test
    runs-on: self-hosted
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Build and push Docker image
      run: |
        docker build -t username/appname:latest .  # Replace with your DockerHub username and app name
        echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin
        docker push username/appname:latest

  integration-test:
    needs: dockerize-application
    runs-on: self-hosted
    services:
      app:
        image: username/appname:latest  # Use the same image name
        ports:
          - 5000:5000
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Run integration tests (example)
      run: |
        # Assuming you have a script to run integration tests against the service
        ./run_integration_tests.sh

  deploy:
    needs: integration-test
    runs-on: self-hosted
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Custom Deployment Action
      uses: ./.github/actions/deploy-action
      with:
        environment: 'production' # Or other environments like 'staging'

  