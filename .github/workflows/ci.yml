name: "ICA2 Group 3 CI/CD pipeline"

on:
  push:
    branches:
      - main

jobs:
  Build-and-Test-Windows:
    runs-on: [self-hosted, Windows, X64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
      - name: Setup Python
        uses: actions/setup-python@v4.7.1
      - name: Python Dependency Installation
        run: pip install -r requirements.txt
        shell: cmd
      - name: Run Unit Tests
        run: python test_app.py
        shell: cmd
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.3
        with:
          name: test-reports
          path: test-reports/

  Build-and-Test-Linux:
    runs-on: [self-hosted, Linux, X64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
      - name: Setup Python
        uses: actions/setup-python@v4.7.1
        with:
          python-version: '3.9'
      - name: Python Dependency Installation
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Unit Tests
        run: python test_app.py
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.3
        with:
          name: test-reports
          path: test-reports/

  Dockerize-application:
    needs: Build-and-Test-Linux
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2

      - name: Test Docker Permissions
        run: docker info

      - name: Login to GitHub Container Registry
        run: echo ${{ secrets.GHCR_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Build and push Docker image
        run: |
          docker build -t ghcr.io/raviteja869/mandelbrot-set-visualizer:latest .
          docker push ghcr.io/raviteja869/mandelbrot-set-visualizer:latest

  Integration-Test:
    needs: Dockerize-application
    runs-on: [self-hosted, Linux, X64]
    steps:
      - uses: actions/checkout@v2
      
      # Find an available port
      - name: Find Available Port
        id: find_port
        run: |
          for port in {5000..5100}; do
            if ! ss -tuln | grep -q ":$port"; then
              echo "Available port: $port"
              echo "::set-output name=port::$port"
              break
            fi
          done

      - name: Start Dockerized Application
        run: docker run -d -p ${{ steps.find_port.outputs.port }}:5000 ghcr.io/raviteja869/mandelbrot-set-visualizer:latest
      
      - name: Run Integration Tests
        env:
          APP_PORT: ${{ steps.find_port.outputs.port }}
        run: ./run_integration_tests.sh

  Deploy:
    needs: Integration-Test
    runs-on: [self-hosted, Linux, X64]
    steps:
      - uses: actions/checkout@v2
      - name: Custom Deployment Action
        uses: ./.github/actions/deploy-action
        with:
          environment: 'production'
